(* global timer setting*)
timer(TRUE, totalDuration);

currTime := timer.ET;

IF timer.Q THEN
    timer(FALSE, totalDuration);
    timer(TRUE, totalDuration);
    currTime := T#0s;
END_IF;

(* offset setting. *)
currTime2 := timer.ET + T#2s;

IF currTime2 >= T#3500ms THEN
    currTime2 := currTime2 - T#3500ms;
END_IF;

(* main logic *)



nsPresent := nsPresent OR nsIncoming;
nsIncoming := FALSE;

ewPresent := ewPresent OR ewIncoming;
ewIncoming := FALSE;

nsPedWaiting := nsPedWaiting OR nspIncoming;
nspIncoming := FALSE;

ewPedWaiting := ewPedWaiting OR ewpIncoming;
ewpIncoming := FALSE;

p1 := nsPresent OR nsPedWaiting;
p2 := ewPresent OR ewPedWaiting;

c1NS(currTime,  p1, yellow1, NScontGreen, NScontRed);
c1EW(currTime2, p2, yellow2, EWcontGreen, EWcontRed);
nsPed(nsColor, nsPedWaiting);
ewPed(ewColor, ewPedWaiting);

nsColor  := c1NS.color;
ewColor  := c1EW.color;
nsPedColor := nsPed.color;
ewPedColor := ewPed.color;

EWcontGreen := EWcontGreen AND NOT (p1 AND currTime2 >= T#2s AND currTime2 < T#3s);
(* buggy code *)
NScontGreen := NScontGreen AND NOT p2;
(* the fix
NScontGreen := NScontGreen AND NOT (p2 AND currTime >= T#2s AND currTime < T#3s);
*)

nsPresent := nsPresent AND NOT (c1NS.color = GREEN);
ewPresent := ewPresent AND NOT (c1EW.color = GREEN);

isGreen := (nsColor = GREEN);
isRed := (nsColor = RED);
bothGreen := (nsColor = GREEN) AND (ewColor = GREEN);

