--- basic arithmetic and logical semantics
fmod ALU-SEMANTICS is
  inc CODE-CONFIG .
 
  var SV1 : String .
  var K : K .
  vars T1 T2 : Rat .
  vars ENUMTYPE ENUMVAL : Pid .
  vars V1 V2 : SemanticValue .
  var BITFIELD : Pid .
  var BITINDEX : Nat .

  eq k(# T1  ~> K) = k(syn2sem(# T1) ~> K) .
  eq k(# SV1  ~> K) = k(syn2sem(# SV1) ~> K) .
  eq k(TRUE  ~> K) = k(syn2sem(TRUE) ~> K) .
  eq k(FALSE   ~> K) = k(syn2sem(FALSE) ~> K) .
  eq k(T# T1 ms  ~> K) = k(syn2sem(T# T1 ms) ~> K) .
  eq k(ENUMTYPE # ENUMVAL  ~> K) = k([enumVal(ENUMTYPE, ENUMVAL)] ~> K) .

  ---div0
---  ceq k(V1 / V2 ~> K) = k(syn2sem(# 2147483647) ~> K) if checkSAT(V2 ==== syn2sem(# 0)) .
---  ceq k(V1 / V2 ~> K) = k(syn2sem(# 2147483647, REAL) ~> K) if checkSAT(V2 ==== syn2sem(# 0, REAL)) .

  ---bitfield
  eq k(V1 . # T1  ~> K) = k(V1 . syn2sem(# T1) ~> K) .
endfm


mod ASSIGNMENT-LOOKUP-SEMANTICS is
  inc CODE-CONFIG .
  inc CONVERSION .
  inc QID .
  inc COMMON-SEMANTIC-VALUE .
  inc CONVERSION-SEMANTICVAL .

  var OBJLOC : ProcessId .
  var I : Pid .
  vars V VV : SemanticValue .
  var K : K .
  vars ENV OBJENV  : Env .
  var ENVSTACK : ProgramStack .
  vars ARRAYENV ARRAYENV1 ARRAYENV2  : ArrayEnv .
  var STORE : Map{Location, SemanticValue} .
  vars CONST CONST' : SemanticValue .
  var ARRAYINDEX  LOCINDEX : Nat .
  vars RESTOBJS OBJS : KConfig .
  var LOCATION  : Location .
  vars REST : KConfig .  
  var TYPE : PType .
  var VS : VSet .

--- assignment

  op @store : Location SemanticValue -> KLabel [ctor] .
 ceq task(k(@store(LOCATION,V) ~> K) REST) store(STORE) 
   = task(k(K) REST) store(insert(LOCATION, conversion0and1toBOOL(TYPE,V), STORE))
  if loc(LOCINDEX, TYPE) := LOCATION /\ $hasMapping(STORE,LOCATION) .

  --- global
  rl task(k(I := V ~> K) callStack(ENV :: ENVSTACK) REST) globalVars(@(I) VS)
  => task(k(@store(ENV[I],V) ~> K) callStack(ENV :: ENVSTACK) REST) globalVars(@(I) VS) .

 ceq task(k(I := V ~> K) callStack(ENV :: ENVSTACK) REST) globalVars(VS)
   = task(k(@store(ENV[I],V) ~> K) callStack(ENV :: ENVSTACK) REST) globalVars(VS)
  if not in(I, VS) .

  eq task(k(ObjLoc(OBJLOC) . I := V ~> K) REST) objs(OBJS) 
   = task(k(@store(getObjEnv(OBJLOC,OBJS)[I],V) ~> K) REST) objs(OBJS) .

 crl [arrayAssignment] : task(k(arrayLoc(ARRAYENV)[VV] := V ~> K) REST) constraints(CONST)
  => task(k(@store(LOCATION,V) ~> K) REST) constraints(simplify(CONST AND CONST'))
  if arrayLookup(ARRAYENV, VV, CONST) => {LOCATION, CONST'} .

--- lookup --- get location
  op @lookup : Location -> KLabel [ctor] .
  eq task(k(@lookup(LOCATION) ~> K) REST) store(STORE) 
   = task(k(STORE[LOCATION] ~> K) REST) store(STORE) .

  --- Pid
  --- global
  rl task(k(I ~> K) callStack(ENV :: ENVSTACK) REST) globalVars(@(I) VS) 
  => task(k(@lookup(ENV[I]) ~> K) callStack(ENV :: ENVSTACK) REST) globalVars(@(I) VS) .

 ceq task(k(I ~> K) callStack(ENV :: ENVSTACK) REST) globalVars(VS) 
   = task(k(@lookup(ENV[I]) ~> K) callStack(ENV :: ENVSTACK) REST) globalVars(VS) 
   if not in(I, VS) .
  --- _._._._
  eq task(k(ObjLoc(OBJLOC) . I ~> K)                 REST) objs(OBJS) 
   = task(k(@lookup(getObjEnv(OBJLOC,OBJS)[I]) ~> K) REST) objs(OBJS) .

  --- array[V]
 crl [arrayLookup] : task(k(arrayLoc(ARRAYENV)[VV] ~> K) REST) constraints(CONST)
  => task(k(@lookup(LOCATION) ~> K) REST) constraints(simplify(CONST AND CONST'))
  if arrayLookup(ARRAYENV, VV, CONST) => {LOCATION, CONST'} .

 crl [array]: arrayLookup((ARRAYENV1, (ARRAYINDEX, LOCATION), ARRAYENV2), V, CONST) 
           => {LOCATION, (V ==== syn2sem(# ARRAYINDEX))}
  if checkSAT(CONST AND (V ==== syn2sem(# ARRAYINDEX))) .
endm

--- conditional statement semantics
mod CONDITIONAL-SEMANTICS is 
  inc CODE-CONFIG .
  inc COMMON-SEMANTIC-VALUE .

  vars I : Pid .
  vars V IFSTATEMENT ITECONDITION : SemanticValue .
  vars PV PV1 PV2 : PValue .
  var K : K .
  var BB : BBranch .
  vars S1 S2 : Stmt .
  var CB : CBranch .
  var CONST : SemanticValue .
  vars IFSTATEMENT2 WHILESTATEMENT REPEATSTATEMENT PE1 PE2 : PExp .
  var REST : KConfig .  

  --- ite
 crl [iteTrue] : task((k(ite(ITECONDITION, PE1, PE2) ~> K)) REST ) constraints(CONST)
 => task((k(PE1 ~> K)) REST ) 
    constraints(CONST AND (ITECONDITION))
    if checkSAT(CONST AND (ITECONDITION)) .
  
 crl [iteFalse] : task((k(ite(ITECONDITION, PE1, PE2) ~> K)) REST ) constraints(CONST)
 => task((k(PE2 ~> K)) REST ) 
    constraints(CONST AND (NOT ITECONDITION))
    if checkSAT(CONST AND (NOT ITECONDITION)) .

 --- if statement
 crl [IFTRUE] :  
     task(k(IF IFSTATEMENT THEN S1 ; BB ENDIF ~> K) REST ) 
     constraints(CONST)
  => task(k(S1 ~> K) REST) 
     constraints(simplify(CONST AND IFSTATEMENT))
  if checkSAT(CONST AND IFSTATEMENT) .

 crl [IFFALSE] : 
     task(k(IF IFSTATEMENT THEN S1 ; emptyBBranch ENDIF ~> K) REST) 
     constraints(CONST)
  => task(k(K) REST) 
     constraints(simplify(CONST AND (NOT IFSTATEMENT)))
  if checkSAT(CONST AND (NOT IFSTATEMENT)) .

 crl [IFFALSE-ELSIF] : 
     task(k(IF IFSTATEMENT THEN S1 ; ELSIF IFSTATEMENT2 THEN S2 ; BB ENDIF ~> K) REST) 
     constraints(CONST)
  => task(k(IF IFSTATEMENT2 THEN S2 ; BB ENDIF ~> K) REST) 
     constraints(simplify(CONST AND (NOT IFSTATEMENT)))
  if checkSAT(CONST AND (NOT IFSTATEMENT)) .

 crl [IFFALSE-ELSE] :  
     task(k(IF IFSTATEMENT THEN S1 ; ELSE S2 ; ENDIF ~> K) REST) 
     constraints(CONST)
  => task(k(S2 ~> K) REST) 
     constraints(simplify(CONST AND (NOT IFSTATEMENT)))
  if checkSAT(CONST AND (NOT IFSTATEMENT)) .


  --- case statement
  eq  task(k(CASE V OF emptyCBranch ELSE S1 ENDCASE ~> K) REST) 
   =  task(k(S1 ~> K) REST)  .

 crl [caseMatch] :  
     task(k(CASE (V)  OF (@ PV2 : S1) CB ELSE S2 ENDCASE ~> K) REST)  
     constraints(CONST)
  => task(k(S1 ~> K) REST)  
     constraints(simplify(CONST AND V ==== syn2sem(PV2)))
  if checkSAT(CONST AND V ==== syn2sem(PV2)) .
  

 crl [caseMatchRangeVersion] :  
     task(k(CASE (V)  OF (@ PV1 .. PV2 : S1) CB ELSE S2 ENDCASE ~> K) REST)  
     constraints(CONST)
  => task(k(S1 ~> K) REST)  
     constraints(simplify(CONST AND syn2sem(PV1) <= V  AND V <= syn2sem(PV2)))
  if checkSAT(CONST AND syn2sem(PV1) <= V  AND V <= syn2sem(PV2)) .

 crl [caseNotMatch] :  
     task(k(CASE (V)  OF (@ PV2 : S1) CB ELSE S2 ENDCASE ~> K) REST)  
     constraints(CONST)
  => task(k(CASE (V)  OF CB ELSE S2 ENDCASE ~> K) REST)  
     constraints(simplify(CONST AND V <> syn2sem(PV2)))
  if checkSAT(CONST AND V <> syn2sem(PV2)) .

 crl [caseNotMatchRangeVersion] :  
     task(k(CASE (V)  OF (@ PV1 .. PV2 : S1) CB ELSE S2 ENDCASE ~> K) REST)  
     constraints(CONST)
  => task(k(CASE (V)  OF CB ELSE S2 ENDCASE ~> K) REST)  
     constraints(simplify(CONST AND (syn2sem(PV1) > V  OR V > syn2sem(PV2))))
  if checkSAT(CONST AND (syn2sem(PV1) > V  OR V > syn2sem(PV2))) .

  --- while statement
  eq task(k(WHILE WHILESTATEMENT DO S1 ENDWHILE ~> K) REST) 
   = task(k(IF WHILESTATEMENT THEN S1 ; WHILE WHILESTATEMENT DO S1 ENDWHILE ; ENDIF ~> K) REST)  .

  --- repeat statement
  eq task(k(REPEAT S1 UNTIL REPEATSTATEMENT ENDREPEAT ~> K) REST) 
   = task(k(IF NOT REPEATSTATEMENT THEN S1 ; REPEAT S1 UNTIL REPEATSTATEMENT ENDREPEAT ; ENDIF ~> K) REST)  .

  --- for statement
  eq task(k(FOR I := V TO PV1 BY PV2 DO S1 ENDFOR ~> K) REST)  
   = task(k(I := V ~> WHILE I <= PV1 DO S1 ; I := I + PV2 ; ENDWHILE ~> K) REST)  .
endm


--- calling of function block, and subprogram
mod CALL-SEMANTICS is
  inc CODE-CONFIG .
  inc COMMON-SEMANTIC-VALUE .

  var CPR : ProcessId .
  vars ENV ENV' OBJENV  : Env .
  vars REST RESTOBJS OBJS : KConfig .  
  var K : K .
  var S : Stmt .
  var ARGS : List{FArgElement} .
  vars STORE STORE' : Map{Location, SemanticValue} .
  var LOCATION : Location .
  vars FBI FBNAME I1 I2 : Pid .
  vars OBJLOC ARRAYINDEX : Nat .
  vars V1 V2 CONST CONST' : SemanticValue .
  var RESTENV : ProgramStack .
  var RESTID : List{ProcessId} .
  var PARMETERDATA : VarSecTypePairList .
  vars PARMETERDATA1 PARMETERDATA2 : VarSecTypePairList .
  vars ONEARG PE1 : PExp .
  var P1 : PProperExp  .
  vars ARRAYENV : ArrayEnv .

  
--- udfb call
  op @call : ProcessId List{FArgElement} -> KLabel [ctor] .
  op @call : ProcessId List{FArgElement} Env Pid -> KLabel [ctor] .
  op @args : List{FArgElement} -> KLabel [ctor] .
  op @bind : Env ProcessId -> KLabel [ctor] .
  op @pop : -> KLabel [ctor] .

 ceq task(k(FBI(ARGS) ~> K) callStack(ENV :: RESTENV) REST) store(STORE)
   = task(k(@call(OBJLOC,ARGS) ~> K) callStack(ENV :: RESTENV) REST) store(STORE)
  if ObjLoc(OBJLOC) := STORE[ENV[FBI]] .

 ceq task(k(@call(OBJLOC,ARGS) ~> K) REST) objs(OBJS)  
   = task(k(@call(OBJLOC,ARGS,OBJENV,FBNAME) ~> K) REST) objs(OBJS) 
  if OBJENV := getObjEnv(OBJLOC,OBJS)
  /\ FBNAME := getObjType(OBJLOC,OBJS) .

  eq task(k(@call(OBJLOC,ARGS,OBJENV,FBNAME) ~> K) REST) 
     PARDef(FBNAME, PARMETERDATA, S) 
   = task(k(@args(norm(ARGS,PARMETERDATA)) ~> @bind(OBJENV,OBJLOC) ~> S ~> @pop ~> K) REST) 
     PARDef(FBNAME, PARMETERDATA, S) .

  op @ALTERNATIVE : -> PExp [ctor] .
  op INPAR(_) : Pid -> Pid [ctor] .
  op INOUTPAR(_) : Pid -> Pid [ctor] .

  op norm : List{FArgElement} VarSecTypePairList -> List{FArgElement} .
  eq norm((ONEARG, ARGS) , ((I1, ##IN)    PARMETERDATA)) = (INPAR(I1)    <:= ONEARG), norm(ARGS, PARMETERDATA) .
  eq norm((ONEARG, ARGS) , ((I1, ##INOUT) PARMETERDATA)) = (INOUTPAR(I1) <:= ONEARG), norm(ARGS, PARMETERDATA) .
  eq norm(nilPExpList, emptyVarSecTypePairList) = nilPExpList .

  eq norm(((I1 <:= ONEARG) , ARGS) , (PARMETERDATA1 (I1, ##IN)    PARMETERDATA2)) = (INPAR(I1)    <:= ONEARG), norm(ARGS, (PARMETERDATA1 PARMETERDATA2)) .
  eq norm(((I1 <:= ONEARG) , ARGS) , (PARMETERDATA1 (I1, ##INOUT) PARMETERDATA2)) = (INOUTPAR(I1) <:= ONEARG), norm(ARGS, (PARMETERDATA1 PARMETERDATA2)) .
  eq norm(nilPExpList, emptyVarSecTypePairList) = nilPExpList .

  --- parameter computation
  --- in parameter
  eq k(@args(((INPAR(I1) <:= P1) , ARGS))  ~> K) = k(P1 ~> @args(((INPAR(I1) <:= @ALTERNATIVE) , ARGS))  ~> K) .
  eq k(V1 ~> @args(((INPAR(I1) <:= @ALTERNATIVE) , ARGS))  ~> K) = k(@args(((INPAR(I1) <:= V1) , ARGS))  ~> K) .

  --- inout parameter
  eq k(@args(((INOUTPAR(I1) <:= P1 . I2) , ARGS))  ~> K) = k(@args(P1 ~> ((INOUTPAR(I1) <:= @ALTERNATIVE . I2) , ARGS))  ~> K) .
  eq k(@args(V1 ~> ((INOUTPAR(I1) <:= @ALTERNATIVE . I2) , ARGS))  ~> K) = k(@args(((INOUTPAR(I1) <:= V1 . I2) , ARGS))  ~> K) .

  eq k(@args(((INOUTPAR(I1) <:= P1[PE1]) , ARGS))  ~> K) = k(@args(P1 ~> ((INOUTPAR(I1) <:= @ALTERNATIVE[PE1]) , ARGS))  ~> K) .
  eq k(@args(V1 ~> ((INOUTPAR(I1) <:= @ALTERNATIVE[PE1]) , ARGS))  ~> K) = k(@args(V1 ~> ((INOUTPAR(I1) <:= V1[PE1]) , ARGS))  ~> K) .

  eq k(@args(((INOUTPAR(I1) <:= V1[P1]) , ARGS))  ~> K) = k(@args(P1 ~> ((INOUTPAR(I1) <:= V1[@ALTERNATIVE]) , ARGS))  ~> K) .
  eq k(@args(V2 ~> ((INOUTPAR(I1) <:= V1[@ALTERNATIVE]) , ARGS))  ~> K) = k(@args(((INOUTPAR(I1) <:= V1[V2]) , ARGS))  ~> K) .


  --- parameter binding

  ---in parameter
  eq task(k(@args((INPAR(I1) <:= V1) , ARGS) ~> @bind(ENV,CPR)  ~> K) REST)
   = task(k(@args(ARGS) ~> @bind(ENV,CPR) ~> I1 := V1  ~> K) REST) .

  --- inout parameter
  eq task((k(@args((INOUTPAR(I1) <:= I2) , ARGS) ~> @bind(ENV',CPR)  ~> K)) callStack(ENV :: RESTENV) REST) 
   = task((k(@args(ARGS) ~> @bind(insert(I1, ENV[I2], ENV'),CPR)  ~> K)) callStack(ENV :: RESTENV) REST)  .

  eq task((k(@args((INOUTPAR(I1) <:= ObjLoc(OBJLOC) . I2) , ARGS) ~> @bind(ENV,CPR)  ~> K)) REST)  objs(OBJS)
   = task((k(@args(ARGS) ~> @bind(insert(I1, getObjEnv(OBJLOC,OBJS)[I2], ENV),CPR)  ~> K)) REST)  objs(OBJS) .

 crl [argBinding] : 
     task((k(@args((INOUTPAR(I1) <:= arrayLoc(ARRAYENV)[V2]) , ARGS) ~> @bind(ENV,CPR)  ~> K)) REST)  constraints(CONST)
  => task((k(@args(ARGS) ~> @bind(insert(I1, LOCATION, ENV),CPR)  ~> K)) REST)  constraints(simplify(CONST AND CONST'))
  if arrayLookup(ARRAYENV, V2, CONST) => {LOCATION, CONST'} .

  --- context switching
  eq task(k(@args(nilPExpList) ~> @bind(ENV,CPR) ~> K) callStack(RESTENV) REST) 
   = task(k(K) callStack(ENV :: RESTENV) REST)  .

  eq task((k(@pop ~> K)) callStack(ENV :: RESTENV) REST) 
   = task((k(K)) callStack(RESTENV) REST)  .

  eq task((k(return ~> @pop ~> K)) callStack(ENV :: RESTENV) REST) 
   = task((k(K)) callStack(RESTENV) REST)  . 

  eq task((k(return ~> S ~> K)) REST) 
   = task((k(return ~> K)) REST)  . 
endm

fmod STREAM-UPDATE-STREAM-DATA is
  inc CODE-CONFIG .

  vars PNAME I MAIN : Pid .
  var ENV : Env .
  var PE1 : PExp .
  var OBJLOC OBJLOC2 : ProcessId .
  vars REST RESTOBJS : KConfig .  
  var STORE : Map{Location, SemanticValue} .
  var LOCATION : Location .
  vars STREAM STREAM2 : StreamMap .
  vars SEQ  : List{SemanticValue} .
  var VAL : SemanticValue .
  var CYCLENAT : Nat .
  var SV1 : SemanticValue .
  var READYMAINLIST : List{PExp} . 
  vars NOTMAIN1 NOTMAIN2 : List{PExp} .

  op simplifyStore : Map{Location, SemanticValue} -> Map{Location, SemanticValue} .
  eq simplifyStore(((LOCATION |-> SV1), STORE)) = ((LOCATION |-> simplify(SV1)) , simplifyStore(STORE)) .
  eq simplifyStore(empty) = empty .

  op readInstream : List{PExp} StreamMap KConfig KConfig StreamMap -> KConfig .
  eq readInstream(READYMAINLIST, empty, RESTOBJS, store(STORE), STREAM2) =  store(simplifyStore(STORE)) inStream(STREAM2) .

  eq readInstream(READYMAINLIST, ((MAIN :: PE1 |-> nilSemanticList) , STREAM), RESTOBJS, store(STORE), STREAM2) 
   = readInstream(READYMAINLIST, STREAM, RESTOBJS, store(STORE), (STREAM2 , (MAIN :: PE1 |-> nilSemanticList))) .
  
ceq readInstream((NOTMAIN1, MAIN, NOTMAIN2), ((MAIN :: PE1 |-> (VAL, SEQ)) , STREAM), RESTOBJS, store(STORE), STREAM2) 
 =  readInstream((NOTMAIN1, MAIN, NOTMAIN2), STREAM, RESTOBJS, store(insert(LOCATION, (VAL), STORE)), (STREAM2, (MAIN :: PE1 |-> (SEQ)))) 
 if locVal(LOCATION) := findLocVal(MAIN . PE1, RESTOBJS, store(STORE)) .

  eq readInstream((NOTMAIN1, MAIN, NOTMAIN2), ((MAIN :: PE1 |-> (**, SEQ)) , STREAM), RESTOBJS, store(STORE), STREAM2) 
  =  readInstream((NOTMAIN1, MAIN, NOTMAIN2), STREAM, RESTOBJS, store(STORE), (STREAM2, (MAIN :: PE1 |-> (SEQ))) ) .

ceq readInstream((NOTMAIN1, MAIN, NOTMAIN2), ((MAIN :: PE1 |-> (VAL)) , STREAM), RESTOBJS, store(STORE), STREAM2) 
 =  readInstream((NOTMAIN1, MAIN, NOTMAIN2), STREAM, RESTOBJS, store(insert(LOCATION, (VAL), STORE)), (STREAM2, (MAIN :: PE1 |-> nilSemanticList))) 
 if locVal(LOCATION) := findLocVal(MAIN . PE1, RESTOBJS, store(STORE)) .

  eq readInstream((NOTMAIN1, MAIN, NOTMAIN2), ((MAIN :: PE1 |-> **) , STREAM), RESTOBJS, store(STORE), STREAM2) 
  =  readInstream((NOTMAIN1, MAIN, NOTMAIN2), STREAM, RESTOBJS, store(STORE), (STREAM2, (MAIN :: PE1 |-> nilSemanticList))) .

  eq readInstream(READYMAINLIST, ((MAIN :: PE1 |-> (SEQ)) , STREAM), RESTOBJS, store(STORE), STREAM2) 
  =  readInstream(READYMAINLIST, STREAM, RESTOBJS, store(STORE), (STREAM2, (MAIN :: PE1 |-> (SEQ))) ) [owise] .


  op writeOutstreamAux : StreamMap KConfig KConfig StreamMap ~> StreamMap . 
  op writeOutstream : Nat StreamMap KConfig KConfig StreamMap ~> StreamMap . 

 ceq writeOutstream(CYCLENAT, STREAM, RESTOBJS, store(STORE), STREAM2)
   = writeOutstreamAux(STREAM, RESTOBJS, store(STORE), STREAM2) if CYCLENAT >= 1 .
 ceq writeOutstream(CYCLENAT, STREAM, RESTOBJS, store(STORE), STREAM2)
   = STREAM if CYCLENAT == 0 .

  eq writeOutstreamAux(empty, RESTOBJS, store(STORE), STREAM2) = STREAM2 .
  
 ceq writeOutstreamAux(((MAIN :: PE1 |-> (SEQ)) , STREAM), RESTOBJS, store(STORE), STREAM2) 
 =  writeOutstreamAux(STREAM, RESTOBJS, store(STORE), (STREAM2, (MAIN :: PE1 |-> (SEQ, ( simplify(STORE[LOCATION]) )))) ) 
 if locVal(LOCATION) := findLocVal(MAIN . PE1, RESTOBJS, store(STORE)) .

  op findLocVal : PExp KConfig KConfig ~> SemanticValue .
  
 ceq findLocVal(ObjLoc(OBJLOC) . I, (obj(id(OBJLOC) mem(ENV) REST) RESTOBJS), store(STORE)) = ObjLoc(OBJLOC2)
 if LOCATION := ENV[I] /\ $hasMapping(STORE, LOCATION) /\ ObjLoc(OBJLOC2) := STORE[LOCATION] .

 ceq findLocVal(ObjLoc(OBJLOC) . I, (obj(id(OBJLOC) mem(ENV) REST) RESTOBJS), store(STORE)) = locVal(LOCATION)
 if LOCATION := ENV[I] /\ $hasMapping(STORE, LOCATION) [owise] .

  eq findLocVal(I, (obj(fbtype(I) id(OBJLOC) REST) RESTOBJS), store(STORE)) = ObjLoc(OBJLOC) .

  eq findLocVal(PE1 . I, RESTOBJS, store(STORE)) = findLocVal(findLocVal(PE1 , RESTOBJS, store(STORE)) . I, RESTOBJS, store(STORE)) [owise] .

---***&&&^^^%%%

endfm

mod STREAM-SEMANTICS is
  inc STREAM-UPDATE-STREAM-DATA .
  inc CODE-CONFIG .

  var VAL : SemanticValue .
  var SVAL : SemanticValue .
  vars STREAM STREAM2 STREAM' INPUTSPECSTREAM INPUTSPECSTREAM' INPUTCOLLECTOR INPUTCOLLECTOR' : StreamMap .
  vars SEQ SEQ' : List{SemanticValue} .
  var KEY : StreamKey .
  var K : K .
  var EXP : PExp .
  var CONST1 CONST2 : SemanticValue .
  vars BOUND BOUND' : Nat .
  vars LTLFORMULA LTLFORMULA' : LTLFormula .
  vars INVARS OUTVARS : SKSet .

---  op _{_} : StreamKey Nat -> PProperExp [prec 1] .
  op _|=_ : StreamMap PExp -> [SemanticValue] .
  op @_|=_ : StreamMap KConfig -> [SemanticValue] .
  op @_|=_ : StreamMap PValue -> [SemanticValue] .

  op refer : List{SemanticValue} Nat -> [SemanticValue] .
  eq refer((VAL, SEQ'), 0) = VAL .
  eq refer((VAL), 0) = VAL .
  eq refer((VAL, SEQ'), (NN:Nat)) = refer(SEQ', (NN:Nat - 1)) .
 ceq refer(VAL, (NN:Nat)) = UNKNOWNOUTPUTVAL if NN:Nat > 0 .
  eq refer(nilSemanticList, NN:Nat) = UNKNOWNOUTPUTVAL .

  eq STREAM |= EXP = @ STREAM |= k(EXP) .

  eq (@ STREAM |= k(UNKNOWNOUTPUTVAL)) = syn2sem(FALSE) .  
  eq (@ STREAM |= k(SVAL)) = SVAL [owise] .  

  eq @ ((KEY |-> SEQ), STREAM') |= k(KEY{NN:Nat} ~> K)
   = @ ((KEY |-> SEQ), STREAM') |= k(refer(SEQ, NN:Nat) ~> K) .

  op replaceStreams : KConfig KConfig ~> KConfig .
  eq replaceStreams(KC:KConfig cycleCounterBound(BOUND) inputCollector(INPUTCOLLECTOR) inputStreamSpec(INPUTSPECSTREAM) LTLContainer(LTLFORMULA) inStream(OS1:StreamMap) outStream(OS2:StreamMap) inVars(SS1:SKSet) outVars(SS2:SKSet), 
  cycleCounterBound(BOUND') inputCollector(INPUTCOLLECTOR') inputStreamSpec(INPUTSPECSTREAM') LTLContainer(LTLFORMULA') inStream(STREAM) outStream(STREAM2) inVars(INVARS) outVars(OUTVARS))
   = KC:KConfig cycleCounterBound(BOUND') inputCollector(INPUTCOLLECTOR') inputStreamSpec(INPUTSPECSTREAM') LTLContainer(LTLFORMULA') inStream(STREAM) outStream(STREAM2) inVars(INVARS) outVars(OUTVARS) .

endm

mod STREAM-EXTENSION is
  inc STREAM-SEMANTICS .

  sort TripleTuple .
  op {_,_,_} : LTLFormula FreshVarMap Nat -> TripleTuple [ctor] .

  --- main operators - streams
  op genEmptyStream : SKSet ~> StreamMap .
  op genIS : StreamMap ~> StreamMap . --- to be deleted
  op repeat : NeList{StreamValue} -> NeList{StreamValue} .
  op symbolic : -> StreamValue .
  op genOS : LTLFormula StreamMap ~> StreamMap .
  op tail : StreamMap -> [StreamMap] .
  op streamLength : StreamMap -> [Nat] .

  --- key type pair
  sorts KeyTypePair KeyTypePairSet .
  subsort KeyTypePair < KeyTypePairSet .

  op emptyKTPS : -> KeyTypePairSet [ctor] .
  op _is_ : StreamKey PType -> KeyTypePair [ctor] .
  op __ : KeyTypePairSet KeyTypePairSet -> KeyTypePairSet [ctor assoc comm id: emptyKTPS format (d n d)] .
  eq KTP:KeyTypePair KTP:KeyTypePair = KTP:KeyTypePair .
  op genKeyTypePair : StreamMap KConfig ~> KeyTypePair .

  ---(
  =========================================
  ============IMPLEMENTATION===============
  =========================================
  ---)
  vars KEY KEY2 KEY3 : StreamKey .
  vars SEQ SEQ2 SEQ3 : List{StreamValue} .
  vars REALINPUT INPUTSPEC INPUTCOLLECT : List{StreamValue} .
  vars STRMAP STRMAP2 STRMAP3 : StreamMap .
  vars RESTMAP RESTMAP2 : [StreamMap] .
  vars KCF OBJS : KConfig .
  vars STORE : Map{Location, SemanticValue} .
  vars N CURR BOUND NEWVARNUM NEWVARNUM1 NEWVARNUM2 : Nat .
  vars E E1 E2 E3: StreamValue .
  var FVAR : SemanticValue .
  var FN : Pid .
  var ID : PExp .
  vars COND COND2 OP1 OP2 LEFTFORMULA RIGHTFORMULA : LTLFormula .
  var C : SemanticValue .
  vars FVARMAP1 FVARMAP2 : FreshVarMap .
  var ENV : Env .
  var LOCTYPE : PType .
  var LOCN : Nat . 
  var SKSET : SKSet .

  --- to be deleted (updateIS, updateISSpec, updateISCollector)
  op updateIS : StreamMap KConfig ~> StreamMap .
  op updateISSpec : StreamMap ~> StreamMap .
  op updateISCollector : StreamMap StreamMap ~> StreamMap .
  op transformISKey : StreamMap ~> StreamMap .

  eq transformISKey(((FN :: ID  |-> SEQ), RESTMAP)) = ((I[FN :: ID] |-> SEQ), transformISKey(RESTMAP)) .
  eq transformISKey(empty) = empty .

  --- to be deleted (genIS)

  eq genIS(((KEY |-> SEQ), RESTMAP)) = ((KEY |-> nilStreamList), genIS(RESTMAP)) [owise] .
  eq genIS(((KEY |-> repeat(SEQ)), RESTMAP)) = ((KEY |-> nilStreamList), genIS(RESTMAP)) .
  eq genIS(((KEY |-> symbolic), RESTMAP)) = ((KEY |-> nilStreamList), genIS(RESTMAP)) .
  eq genIS(empty) = empty .

  eq updateISSpec((KEY |-> (E)), RESTMAP) = updateISSpec(RESTMAP) [owise] .
  eq updateISSpec((KEY |-> (E, SEQ)), RESTMAP) = ((KEY |-> SEQ), updateISSpec(RESTMAP)) [owise] .
  eq updateISSpec((KEY |-> repeat(E, SEQ)), RESTMAP) = ((KEY |-> repeat(SEQ, E)), updateISSpec(RESTMAP)) .
  eq updateISSpec((KEY |-> repeat(E)), RESTMAP) = ((KEY |-> repeat(E)), updateISSpec(RESTMAP)) .
  eq updateISSpec((KEY |-> symbolic), RESTMAP) = ((KEY |-> symbolic), updateISSpec(RESTMAP)) .
  eq updateISSpec(empty) = empty .

  eq updateISCollector(((KEY |-> (E)), RESTMAP), ((KEY |-> SEQ), RESTMAP2)) = updateISCollector(RESTMAP, ((KEY |-> (SEQ, E)), RESTMAP2)) .
  eq updateISCollector(empty, RESTMAP) = RESTMAP .

  eq updateIS(empty, KCF) = empty .
  eq updateIS(((KEY |-> (E1 , SEQ)), RESTMAP), KCF) = ((KEY |-> E1), updateIS(RESTMAP, KCF)) [owise] .
  eq updateIS(((KEY |-> (E1)), RESTMAP), KCF) = ((KEY |-> E1), updateIS(RESTMAP, KCF)) [owise] .
  eq updateIS(((KEY |-> repeat(E, SEQ)), RESTMAP), KCF ) = ((KEY |-> E), updateIS(RESTMAP, KCF)) .
  eq updateIS(((KEY |-> repeat(E)), RESTMAP), KCF ) = ((KEY |-> E), updateIS(RESTMAP, KCF)) .

  --- sym variable generation
  op @genSym : StreamKey PType Nat ~> List{StreamValue} .
---  eq updateIS(((KEY |-> symbolic), RESTMAP), KCF cycleCounter(N))
---   = ((KEY |-> @genSym(KEY, @getType(KEY, KCF), N)), updateIS(RESTMAP, KCF cycleCounter(N))) .

  op @getType : Pid Env ~> PType .
 ceq @getType(ID, ENV) = LOCTYPE
  if loc(LOCN, LOCTYPE) := ENV[ID] . 

  --- to be deleted (genKeyTypePair)
  eq genKeyTypePair(empty, KCF) = emptyKTPS .
---  eq genKeyTypePair(((KEY |-> SEQ), RESTMAP), KCF) = genKeyTypePair(RESTMAP, KCF) [owise] .
---  eq genKeyTypePair(((KEY |-> repeat(SEQ)), RESTMAP), KCF) = genKeyTypePair(RESTMAP, KCF) .
---  eq genKeyTypePair(((KEY |-> symbolic), RESTMAP), KCF) = (KEY is @getType(KEY, KCF)) genKeyTypePair(RESTMAP, KCF) .

  eq genOS(COND, STRMAP) = genEmptyStream(setDiff(collectKeySet(COND), streamKeySet(transformISKey(STRMAP)))) .

  --- streamMap tail
  op @tail : List{StreamValue} ~> List{StreamValue} . 
  eq @tail((SV:StreamValue , SEQ)) = SEQ .
  eq @tail(SV:StreamValue) = nilSemanticList .

  op @size : List{StreamValue} ~> Nat .
  eq @size(nilSemanticList) = 0 .
  eq @size(SV:StreamValue) = 1 .
  eq @size((SV:StreamValue, SEQ)) = 1 + @size(SEQ) .

  eq tail(empty) = empty .
  eq tail((KEY |-> SEQ), RESTMAP) = ((KEY |-> @tail(SEQ)), tail(RESTMAP)) .

  eq streamLength(((KEY |-> SEQ), RESTMAP)) = @size(SEQ) .

  op genFormula : LTLFormula Nat Nat ~> PExp .
  --- base
  eq genFormula(emptyLTLFormula, CURR, BOUND) = emptyLTLFormula .
  eq genFormula(FVAR, CURR, BOUND) = FVAR .
  eq genFormula(KEY{s N}, CURR, BOUND) = NEXT(KEY{N}) .
  eq genFormula(KEY{0}, CURR, BOUND) = genFormula(KEY, CURR, BOUND) .
  eq genFormula(PV:PValue, CURR, BOUND) = PV:PValue .
  eq genFormula(KEY, CURR, BOUND) = KEY{CURR} .

  eq genFormula(OP1 ==== OP2, CURR, BOUND) = genFormula(OP1, CURR, BOUND) ==== genFormula(OP2, CURR, BOUND) .
  eq genFormula(OP1 <> OP2, CURR, BOUND) = genFormula(OP1, CURR, BOUND) <> genFormula(OP2, CURR, BOUND) .
  eq genFormula(OP1 <> OP2, CURR, BOUND) = genFormula(OP1, CURR, BOUND) <> genFormula(OP2, CURR, BOUND) .
  eq genFormula(OP1 < OP2, CURR, BOUND) = genFormula(OP1, CURR, BOUND) < genFormula(OP2, CURR, BOUND) .
  eq genFormula(OP1 > OP2, CURR, BOUND) = genFormula(OP1, CURR, BOUND) > genFormula(OP2, CURR, BOUND) .
  eq genFormula(OP1 <= OP2, CURR, BOUND) = genFormula(OP1, CURR, BOUND) <= genFormula(OP2, CURR, BOUND) .
  eq genFormula(OP1 >= OP2, CURR, BOUND) = genFormula(OP1, CURR, BOUND) >= genFormula(OP2, CURR, BOUND) .

  eq genFormula(NOT COND, CURR, BOUND) = (NOT genFormula(COND, CURR, BOUND)) .
  eq genFormula(COND AND COND2, CURR, BOUND) = genFormula(COND, CURR, BOUND) AND genFormula(COND2, CURR, BOUND) .
  eq genFormula(COND OR COND2, CURR, BOUND) = genFormula(COND, CURR, BOUND) OR genFormula(COND2, CURR, BOUND) .

  --- IMPLICATION
  eq genFormula(COND ==> COND2, CURR, BOUND) 
   = (NOT genFormula(COND, CURR, BOUND)) OR genFormula(COND2, CURR, BOUND) .
  --- NEXT
 ceq genFormula(NEXT(COND), CURR, BOUND) = NEXT(COND) if BOUND > CURR .
 ceq genFormula(NEXT(COND), CURR, BOUND) = FALSE if CURR >= BOUND .
 ceq genFormula(WNEXT(COND), CURR, BOUND) = WNEXT(COND) if BOUND > CURR .
 ceq genFormula(WNEXT(COND), CURR, BOUND) = TRUE if CURR >= BOUND .
 --- FINALLY
  eq genFormula(FINALLY(COND), CURR, BOUND) = genFormula(COND, CURR, BOUND) OR genFormula(NEXT(FINALLY(COND)), CURR, BOUND) .
  --- GLOBALLY
  eq genFormula(GLOBALLY(COND), CURR, BOUND) = genFormula(COND, CURR, BOUND) AND genFormula(WNEXT(GLOBALLY(COND)), CURR, BOUND) .
  --- UNTIL
  eq genFormula(COND UNTIL COND2, CURR, BOUND) = genFormula(COND2, CURR, BOUND) OR (genFormula(COND, CURR, BOUND) AND NEXT(COND UNTIL COND2)) .


  op toNNF : PExp ~> PExp .

  eq toNNF(emptyLTLFormula) = emptyLTLFormula .
  eq toNNF(KEY{N}) = KEY{N} .
  eq toNNF(PV:PValue) = PV:PValue .
  eq toNNF(FVAR) = FVAR .

  eq toNNF(NOT (OP1 AND OP2)) = toNNF(NOT OP1) OR toNNF(NOT OP2) .
  eq toNNF(NOT (OP1 OR OP2)) = toNNF(NOT OP1) AND toNNF(NOT OP2) .
  eq toNNF(NOT (NOT(COND))) = toNNF(COND) .
  eq toNNF(NOT (COND)) = (NOT (toNNF(COND))) [owise] .

  eq toNNF(OP1 ==== OP2) = toNNF(OP1) ==== toNNF(OP2) .
  eq toNNF(OP1 <> OP2) = toNNF(OP1) <> toNNF(OP2) .
  eq toNNF(OP1 < OP2) = toNNF(OP1) < toNNF(OP2) .
  eq toNNF(OP1 > OP2) = toNNF(OP1) > toNNF(OP2) .
  eq toNNF(OP1 <= OP2) = toNNF(OP1) <= toNNF(OP2) .
  eq toNNF(OP1 >= OP2) = toNNF(OP1) >= toNNF(OP2) .
  eq toNNF(OP1 AND OP2) = toNNF(OP1) AND toNNF(OP2) .
  eq toNNF(OP1 OR OP2) = toNNF(OP1) OR toNNF(OP2) .

  eq toNNF(NEXT(COND)) = NEXT(COND) .
  eq toNNF(WNEXT(COND)) = WNEXT(COND) .


  op addFreshVar : LTLFormula Nat ~> TripleTuple .
  --- base
  eq addFreshVar(emptyLTLFormula, NEWVARNUM) = {emptyLTLFormula, emptyFreshVarMap, NEWVARNUM} .
  eq addFreshVar(FVAR, NEWVARNUM) = {FVAR, emptyFreshVarMap, NEWVARNUM} .
  eq addFreshVar(PV:PValue, NEWVARNUM) = {PV:PValue , emptyFreshVarMap, NEWVARNUM} .
  eq addFreshVar(KEY{N}, NEWVARNUM) = {KEY{N}, emptyFreshVarMap, NEWVARNUM} .

 ceq addFreshVar(OP1 ==== OP2, NEWVARNUM) = {LEFTFORMULA ==== RIGHTFORMULA, (FVARMAP1, FVARMAP2), NEWVARNUM2 }
 if {LEFTFORMULA, FVARMAP1, NEWVARNUM1} := addFreshVar(OP1, NEWVARNUM) /\ {RIGHTFORMULA, FVARMAP2, NEWVARNUM2} := addFreshVar(OP2, NEWVARNUM1)  .

 ceq addFreshVar(OP1 <> OP2, NEWVARNUM) = {LEFTFORMULA <> RIGHTFORMULA, (FVARMAP1, FVARMAP2), NEWVARNUM2 }
 if {LEFTFORMULA, FVARMAP1, NEWVARNUM1} := addFreshVar(OP1, NEWVARNUM) /\ {RIGHTFORMULA, FVARMAP2, NEWVARNUM2} := addFreshVar(OP2, NEWVARNUM1)  .

 ceq addFreshVar(OP1 < OP2, NEWVARNUM) = {LEFTFORMULA < RIGHTFORMULA, (FVARMAP1, FVARMAP2), NEWVARNUM2 }
 if {LEFTFORMULA, FVARMAP1, NEWVARNUM1} := addFreshVar(OP1, NEWVARNUM) /\ {RIGHTFORMULA, FVARMAP2, NEWVARNUM2} := addFreshVar(OP2, NEWVARNUM1)  .

 ceq addFreshVar(OP1 > OP2, NEWVARNUM) = {LEFTFORMULA > RIGHTFORMULA, (FVARMAP1, FVARMAP2), NEWVARNUM2 }
 if {LEFTFORMULA, FVARMAP1, NEWVARNUM1} := addFreshVar(OP1, NEWVARNUM) /\ {RIGHTFORMULA, FVARMAP2, NEWVARNUM2} := addFreshVar(OP2, NEWVARNUM1)  .

 ceq addFreshVar(OP1 <= OP2, NEWVARNUM) = {LEFTFORMULA <= RIGHTFORMULA, (FVARMAP1, FVARMAP2), NEWVARNUM2 }
 if {LEFTFORMULA, FVARMAP1, NEWVARNUM1} := addFreshVar(OP1, NEWVARNUM) /\ {RIGHTFORMULA, FVARMAP2, NEWVARNUM2} := addFreshVar(OP2, NEWVARNUM1)  .

 ceq addFreshVar(OP1 >= OP2, NEWVARNUM) = {LEFTFORMULA >= RIGHTFORMULA, (FVARMAP1, FVARMAP2), NEWVARNUM2 }
 if {LEFTFORMULA, FVARMAP1, NEWVARNUM1} := addFreshVar(OP1, NEWVARNUM) /\ {RIGHTFORMULA, FVARMAP2, NEWVARNUM2} := addFreshVar(OP2, NEWVARNUM1)  .

 ceq addFreshVar(OP1 AND OP2, NEWVARNUM) = {LEFTFORMULA AND RIGHTFORMULA, (FVARMAP1, FVARMAP2), NEWVARNUM2 }
 if {LEFTFORMULA, FVARMAP1, NEWVARNUM1} := addFreshVar(OP1, NEWVARNUM) /\ {RIGHTFORMULA, FVARMAP2, NEWVARNUM2} := addFreshVar(OP2, NEWVARNUM1)  .

 ceq addFreshVar(OP1 OR OP2, NEWVARNUM) = {LEFTFORMULA OR RIGHTFORMULA, (FVARMAP1, FVARMAP2), NEWVARNUM2 }
 if {LEFTFORMULA, FVARMAP1, NEWVARNUM1} := addFreshVar(OP1, NEWVARNUM) /\ {RIGHTFORMULA, FVARMAP2, NEWVARNUM2} := addFreshVar(OP2, NEWVARNUM1)  .

  op @genFVAR : Nat ~> SemanticValue .

 ceq addFreshVar(NEXT(COND), NEWVARNUM) = {FVAR, (FVAR <-| COND), NEWVARNUM + 1} 
 if FVAR := @genFVAR(NEWVARNUM) .

 ceq addFreshVar(WNEXT(COND), NEWVARNUM) = {FVAR, (FVAR <-| COND), NEWVARNUM + 1} 
 if FVAR := @genFVAR(NEWVARNUM) .

 ceq addFreshVar(NOT NEXT(COND), NEWVARNUM) = {FVAR, (FVAR <-| NOT (COND)), NEWVARNUM + 1}
 if FVAR := @genFVAR(NEWVARNUM) .

 ceq addFreshVar(NOT WNEXT(COND), NEWVARNUM) = {FVAR, (FVAR <-| NOT (COND)), NEWVARNUM + 1}
 if FVAR := @genFVAR(NEWVARNUM) .

 ceq addFreshVar(NOT COND, NEWVARNUM) = {NOT (LEFTFORMULA), FVARMAP1, NEWVARNUM1}
 if {LEFTFORMULA, FVARMAP1, NEWVARNUM1} := addFreshVar(COND, NEWVARNUM) [owise] .

  op combineLTLFormulaAndMap : LTLFormula FreshVarMap ~> LTLFormula .
  eq combineLTLFormulaAndMap(COND , ((FVAR <-| OP1), FVARMAP1)) 
  = combineLTLFormulaAndMap((COND AND (FVAR ==== syn2sem(FALSE))) , FVARMAP1) .
  eq combineLTLFormulaAndMap(COND, emptyFreshVarMap) = COND .
endm

--- starting new cycle
mod CYCLE-SEMANTICS is
  inc CODE-CONFIG .
  inc STREAM-EXTENSION .

  var TKS : List{ProcessId} .
  vars PRID PRID2 : ProcessId .
  vars PERIOD DUE CYCLECOUNT BOUND NEWVARNUM NEWVARNUM' : Nat .
  vars PR ES DL PR2 ES2 DL2 INTERVAL MCT : Nat .
  var PNAME : Pid .
  var S : Stmt .
  vars CT  : Rat .
  vars KCF PROCS OBJS : KConfig .
  vars K K1 K2 : K .
  vars REST REST2 : KConfig . 
  var NEXTOBJS : KConfig .
  var PARMETERDATA : VarSecTypePairList .
  var RESTOBJS : KConfig .
  vars TNAT CONST FVAR : SemanticValue .
  var STORE : Map{Location, SemanticValue} .
  vars OUTSTREAM OUTSTREAM' INSTREAM : StreamMap .
  vars REALINPUTSTREAM INPUTSPECSTREAM INPUTCOLLECTSTREAM : StreamMap . 
  vars REALINPUTSTREAM' INPUTSPECSTREAM' INPUTCOLLECTSTREAM' : StreamMap . 
  vars LTLFORMULA LTLFORMULA' : LTLFormula .
  var LTLRESULT LTLRESULT' : checkSATResult .
  vars FVARMAP FVARMAP' FVARMAP'' : FreshVarMap .
  var FVARMAPFORMULA : LTLFormula .
  vars SQ Q1 Q2 : JobList .
  var JOBS : JobSet .
  var IM : Map{ProcessId, Nat} .
  vars INVARS OUTVARS : SKSet .
  var VAR : PExp .
  var VARS : List{PExp} .
  var VAL : SemanticValue .
  vars SEQ SEQ2 : List{SemanticValue} .
  vars STREAM STREAM2 : StreamMap .
  var ENV : Env .
  var LOCN : Nat .
  var LOCTYPE : PType .

  ops @input @output @timerUpdate : -> KLabel [ctor] .
  ops @takeInput @writeOutput : List{PExp} -> KLabel [ctor] .  
  op getVarList : SKSet Pid ~> List{PExp} .
  eq getVarList(PNAME :: VAR nnn INVARS, PNAME)
   = (VAR, getVarList(INVARS, PNAME)) . 
  eq getVarList(INVARS, PNAME) = nilPExpList [owise] .

  eq task(id(PRID) k(@input ~> K) REST)
     objs(obj(id(PRID) fbtype(PNAME) REST2) OBJS)
     inVars(INVARS)
   = task(id(PRID) k(@takeInput(getVarList(INVARS, PNAME)) ~> K) REST)
     objs(obj(id(PRID) fbtype(PNAME) REST2) OBJS)
     inVars(INVARS) . 

  eq task(id(PRID) k(@output ~> K) REST)
     objs(obj(id(PRID) fbtype(PNAME) REST2) OBJS)
     outVars(OUTVARS)
   = task(id(PRID) k(@writeOutput(getVarList(OUTVARS, PNAME)) ~> K) REST)
     objs(obj(id(PRID) fbtype(PNAME) REST2) OBJS)
     outVars(OUTVARS) . 

  eq k(@takeInput(nilPExpList) ~> K)
   = k(K) .

  eq k(@writeOutput(nilPExpList) ~> K)
   = k(K) .

  --- input case 1: last single value
  eq task(id(PRID) k(@takeInput(VAR, VARS) ~> K) REST)
     objs(obj(id(PRID) fbtype(PNAME) REST2) OBJS)
     inputStreamSpec((PNAME :: VAR |-> VAL), STREAM)
     inputCollector((PNAME :: VAR |-> SEQ2), STREAM2)
   = task(id(PRID) k(VAR := VAL ~> @takeInput(VARS) ~> K) REST)
     objs(obj(id(PRID) fbtype(PNAME) REST2) OBJS)
     inputStreamSpec((PNAME :: VAR |-> nilStreamList), STREAM)
     inputCollector((PNAME :: VAR |-> SEQ2, VAL), STREAM2) .

  --- input case 2: single value
  eq task(id(PRID) k(@takeInput(VAR, VARS) ~> K) REST)
     objs(obj(id(PRID) fbtype(PNAME) REST2) OBJS)
     inputStreamSpec((PNAME :: VAR |-> VAL, SEQ), STREAM)
     inputCollector((PNAME :: VAR |-> SEQ2), STREAM2)
   = task(id(PRID) k(VAR := VAL ~> @takeInput(VARS) ~> K) REST)
     objs(obj(id(PRID) fbtype(PNAME) REST2) OBJS)
     inputStreamSpec((PNAME :: VAR |-> SEQ), STREAM)
     inputCollector((PNAME :: VAR |-> SEQ2, VAL), STREAM2) .

  --- input case 3: repeat single value
  eq task(id(PRID) k(@takeInput(VAR, VARS) ~> K) REST)
     objs(obj(id(PRID) fbtype(PNAME) REST2) OBJS)
     inputStreamSpec((PNAME :: VAR |-> repeat(VAL)), STREAM)
     inputCollector((PNAME :: VAR |-> SEQ2), STREAM2)
   = task(id(PRID) k(VAR := VAL ~> @takeInput(VARS) ~> K) REST)
     objs(obj(id(PRID) fbtype(PNAME) REST2) OBJS)
     inputStreamSpec((PNAME :: VAR |-> repeat(VAL)), STREAM)
     inputCollector((PNAME :: VAR |-> SEQ2, VAL), STREAM2) .

  --- input case 4: repeat value
  eq task(id(PRID) k(@takeInput(VAR, VARS) ~> K) REST)
     objs(obj(id(PRID) fbtype(PNAME) REST2) OBJS)
     inputStreamSpec((PNAME :: VAR |-> repeat(VAL, SEQ)), STREAM)
     inputCollector((PNAME :: VAR |-> SEQ2), STREAM2)
   = task(id(PRID) k(VAR := VAL ~> @takeInput(VARS) ~> K) REST)
     objs(obj(id(PRID) fbtype(PNAME) REST2) OBJS)
     inputStreamSpec((PNAME :: VAR |-> repeat(SEQ, VAL)), STREAM)
     inputCollector((PNAME :: VAR |-> SEQ2, VAL), STREAM2) .

  --- input case 5: last symbolic value
  eq activeJob(Some(@j(PRID, PR, ES, DL)))
     task(id(PRID) k(@takeInput(VAR, VARS) ~> K) REST)
     objs(obj(id(PRID) fbtype(PNAME) mem(ENV) REST2) OBJS)
     inputStreamSpec((PNAME :: VAR |-> symbolic), STREAM)
     inputCollector((PNAME :: VAR |-> SEQ2), STREAM2)
   = activeJob(Some(@j(PRID, PR, ES, DL)))
     task(id(PRID) k(VAR := @genSym(PNAME :: VAR, @getType(VAR, ENV), ES)
                     ~> @takeInput(VARS) ~> K) REST)
     objs(obj(id(PRID) fbtype(PNAME) REST2) OBJS)
     inputStreamSpec((PNAME :: VAR |-> nilStreamList), STREAM)
     inputCollector((PNAME :: VAR |-> SEQ2, @genSym(PNAME :: VAR, @getType(VAR, ENV), ES)), STREAM2) .

  --- input case 6: symbolic value
  eq activeJob(Some(@j(PRID, PR, ES, DL)))
     task(id(PRID) k(@takeInput(VAR, VARS) ~> K) REST)
     objs(obj(id(PRID) fbtype(PNAME) mem(ENV) REST2) OBJS)
     inputStreamSpec((PNAME :: VAR |-> symbolic, SEQ), STREAM)
     inputCollector((PNAME :: VAR |-> SEQ2), STREAM2)
   = activeJob(Some(@j(PRID, PR, ES, DL)))
     task(id(PRID) k(VAR := @genSym(PNAME :: VAR, @getType(VAR, ENV), ES)
                     ~> @takeInput(VARS) ~> K) REST)
     objs(obj(id(PRID) fbtype(PNAME) REST2) OBJS)
     inputStreamSpec((PNAME :: VAR |-> SEQ), STREAM)
     inputCollector((PNAME :: VAR |-> SEQ2, @genSym(PNAME :: VAR, @getType(VAR, ENV), ES)), STREAM2) .

  --- input case 7: repeat symbolic
  eq activeJob(Some(@j(PRID, PR, ES, DL)))
     task(id(PRID) k(@takeInput(VAR, VARS) ~> K) REST)
     objs(obj(id(PRID) fbtype(PNAME) mem(ENV) REST2) OBJS)
     inputStreamSpec((PNAME :: VAR |-> repeat(symbolic)), STREAM)
     inputCollector((PNAME :: VAR |-> SEQ2), STREAM2)
   = activeJob(Some(@j(PRID, PR, ES, DL)))
     task(id(PRID) k(VAR := @genSym(PNAME :: VAR, @getType(VAR, ENV), ES)
                     ~> @takeInput(VARS) ~> K) REST)
     objs(obj(id(PRID) fbtype(PNAME) REST2) OBJS)
     inputStreamSpec((PNAME :: VAR |-> repeat(symbolic)), STREAM)
     inputCollector((PNAME :: VAR |-> SEQ2, @genSym(PNAME :: VAR, @getType(VAR, ENV), ES)), STREAM2) .

  --- input case 8: repeat symbolic and other
  eq activeJob(Some(@j(PRID, PR, ES, DL)))
     task(id(PRID) k(@takeInput(VAR, VARS) ~> K) REST)
     objs(obj(id(PRID) fbtype(PNAME) mem(ENV) REST2) OBJS)
     inputStreamSpec((PNAME :: VAR |-> repeat(symbolic, SEQ)), STREAM)
     inputCollector((PNAME :: VAR |-> SEQ2), STREAM2)
   = activeJob(Some(@j(PRID, PR, ES, DL)))
     task(id(PRID) k(VAR := @genSym(PNAME :: VAR, @getType(VAR, ENV), ES)
                     ~> @takeInput(VARS) ~> K) REST)
     objs(obj(id(PRID) fbtype(PNAME) REST2) OBJS)
     inputStreamSpec((PNAME :: VAR |-> repeat(SEQ, symbolic)), STREAM)
     inputCollector((PNAME :: VAR |-> SEQ2, @genSym(PNAME :: VAR, @getType(VAR, ENV), ES)), STREAM2) .

  eq k(@writeOutput(VAR, VARS) ~> K)
   = k(VAR ~> @writeOutput(VAR, VARS) ~> K) .

  --- output
  eq task(id(PRID) k(VAL ~> @writeOutput(VAR, VARS) ~> K) REST)
     objs(obj(id(PRID) fbtype(PNAME) REST2) OBJS)
     outStream((PNAME :: VAR |-> SEQ), STREAM)
   = task(id(PRID) k(@writeOutput(VARS) ~> K) REST)
     objs(obj(id(PRID) fbtype(PNAME) REST2) OBJS)
     outStream((PNAME :: VAR |-> SEQ, VAL), STREAM) . 

  --- timer update
  eq interval((PRID |-> INTERVAL, IM)) 
     task(id(PRID) k(@timerUpdate ~> K) REST)
     objs(obj(timer(@timer(TNAT)) REST2) RESTOBJS)
   = interval((PRID |-> INTERVAL, IM)) 
     task(id(PRID) k(K) REST)
     objs(obj(timer(@timer(TNAT + syn2sem(T# INTERVAL ms))) REST2) RESTOBJS) .

  op updateLTLResult : SemanticValue LTLFormula StreamMap Nat ~> checkSATResult .
 ceq updateLTLResult(CONST, LTLFORMULA, OUTSTREAM, CYCLECOUNT) = UNSAT if CYCLECOUNT < 1 .
 ceq updateLTLResult(CONST, emptyLTLFormula, OUTSTREAM, CYCLECOUNT) = UNSAT if CYCLECOUNT >= 1 .
 ceq updateLTLResult(CONST, LTLFORMULA, OUTSTREAM, CYCLECOUNT) = checkSATwithAssignment(CONST AND (OUTSTREAM |= LTLFORMULA)) if CYCLECOUNT >= 1 [owise]  .

  op updateLTLFormula : LTLFormula FreshVarMap Nat Nat Nat FreshVarMap ~> TripleTuple .

 ceq updateLTLFormula(LTLFORMULA, FVARMAP, NEWVARNUM, CYCLECOUNT, BOUND, FVARMAP') = { LTLFORMULA, FVARMAP, NEWVARNUM } if CYCLECOUNT == 0 .

 ceq updateLTLFormula(LTLFORMULA, FVARMAP, NEWVARNUM, CYCLECOUNT, BOUND, FVARMAP') 
   = addFreshVar(toNNF(genFormula(LTLFORMULA, CYCLECOUNT - 1, BOUND)), NEWVARNUM) if CYCLECOUNT == 1 .

 ceq updateLTLFormula(LTLFORMULA, ((FVAR <-| FVARMAPFORMULA), FVARMAP), NEWVARNUM, CYCLECOUNT, BOUND, FVARMAP') 
   = updateLTLFormula((LTLFORMULA AND (FVAR ==== (LTLFORMULA'))), FVARMAP, NEWVARNUM', CYCLECOUNT, BOUND, (FVARMAP', FVARMAP'')) 
  if 
  CYCLECOUNT > 1 /\
  {LTLFORMULA', FVARMAP'', NEWVARNUM'} := addFreshVar(toNNF(genFormula(FVARMAPFORMULA, CYCLECOUNT - 1, BOUND)), NEWVARNUM)  .

 ceq updateLTLFormula(LTLFORMULA, emptyFreshVarMap, NEWVARNUM, CYCLECOUNT, BOUND, FVARMAP) = {LTLFORMULA, FVARMAP, NEWVARNUM} if CYCLECOUNT > 1 .
 
---(
 crl [cycle] : cycleCounter(CYCLECOUNT) cycleCounterBound(BOUND) jobQueue( nilProcIds ) mainList( ML ) 
               outStream(OUTSTREAM) inStream(INSTREAM) cycleTime(CT) objs(OBJS) store(STORE) 
               constraints(CONST) LTLContainer(LTLFORMULA) LTLResult(LTLRESULT)
               inputCollector(INPUTCOLLECTSTREAM) inputStreamSpec(INPUTSPECSTREAM) LTLSubGoal(FVARMAP , NEWVARNUM)
   => cycleCounter(CYCLECOUNT + 1) cycleCounterBound(BOUND) cycleTime(CT)
      decideWhatProcToRun(jobQueue(TKS), procs(PROCS))
      objs(plusCycleTimeFromOBJTIMER(CT, OBJS))
      mainList( updateMainList(ML) ) 
      readInstream(collectReadyProcList(TKS, OBJS), REALINPUTSTREAM', OBJS, store(STORE), empty)
      outStream(OUTSTREAM')
      constraints(simplify(CONST)) LTLContainer(LTLFORMULA') LTLResult(LTLRESULT')
      inputCollector(INPUTCOLLECTSTREAM') inputStreamSpec(INPUTSPECSTREAM') LTLSubGoal(FVARMAP', NEWVARNUM')
    if 
    CYCLECOUNT <= BOUND /\
    checkSAT(CONST) /\ 
    REALINPUTSTREAM' := updateIS(INPUTSPECSTREAM, (objs(OBJS) store(STORE) cycleCounter(CYCLECOUNT))) /\
    INPUTSPECSTREAM' := updateISSpec(INPUTSPECSTREAM) /\
    INPUTCOLLECTSTREAM' := updateISCollector(REALINPUTSTREAM', INPUTCOLLECTSTREAM) /\
    TKS := collectTaskFromMainList(ML,  nilProcIds ) /\ 
    OUTSTREAM' := writeOutstream(CYCLECOUNT, OUTSTREAM, OBJS, store(STORE), empty) /\
    {LTLFORMULA', FVARMAP', NEWVARNUM'} := updateLTLFormula(LTLFORMULA, FVARMAP, NEWVARNUM, CYCLECOUNT, BOUND - 1, emptyFreshVarMap) /\
    LTLRESULT' := updateLTLResult(CONST, combineLTLFormulaAndMap(LTLFORMULA', FVARMAP'), (transformISKey(INPUTCOLLECTSTREAM'), OUTSTREAM'), CYCLECOUNT) /\
    LTLRESULT == UNSAT 
    .
---) 

 ceq [invalid] :
     minCurrTime(MCT)
     activeJob(Some(@j(PRID, PR, ES, DL)))
     task(id(PRID) k(K) REST)
     futureJobs(@j(PRID2, PR2, ES2, DL2) JOBS)
   = minCurrTime(MCT)
     activeJob(Some(@j(PRID, PR, ES, DL)))
     task(id(PRID) k(@block ~> K) REST)
     futureJobs(@j(PRID2, PR2, ES2, DL2) JOBS)
  if DL2 < MCT .


  rl [schedule] :
     minCurrTime(MCT)
     activeJob(None)
     sQueue((@j(PRID, PR, ES, DL), SQ))
     task(id(PRID) k(@block ~> K) REST)
  => minCurrTime(if MCT < ES then ES else MCT fi)
     activeJob(Some(@j(PRID, PR, ES, DL)))
     sQueue((@j(PRID, PR, ES, DL), SQ))
     task(id(PRID) k(K) REST) .

  rl [endProgram] :
     activeJob(Some(@j(PRID, PR, ES, DL)))
     task(id(PRID) k(.K) REST)
     sQueue((Q1, @j(PRID, PR, ES, DL), Q2))
     futureJobs(JOBS)
     interval((PRID |-> INTERVAL, IM))
  => activeJob(None)
     task(id(PRID) k(.K) REST)
     sQueue((Q1, Q2))
     futureJobs((JOBS @j(PRID, PR, ES + INTERVAL, DL + INTERVAL)))
     interval((PRID |-> INTERVAL, IM)) .

  eq [loadNBlock] :
     task(id(PRID) k(@loadNBlock) REST)
     objs(obj(id(PRID) fbtype(PNAME) REST2) OBJS)
     PARDef(PNAME, PARMETERDATA, S)
   = task(id(PRID) k(@block ~> @input ~> @timerUpdate ~> S ~> @output) REST)
     objs(obj(id(PRID) fbtype(PNAME) REST2) OBJS)
     PARDef(PNAME, PARMETERDATA, S) .

  rl [placeJob] :
     futureJobs((@j(PRID, PR, ES, DL) JOBS))
     sQueue(SQ)
     task(id(PRID) k(K) REST)
  => futureJobs(JOBS)
     sQueue(add(SQ, @j(PRID, PR, ES, DL)))
     task(id(PRID) k(@loadNBlock) REST) .

  rl [preempt] :
     minCurrTime(MCT)
     activeJob(Some(@j(PRID2, PR2, ES2, DL2)))
     sQueue((@j(PRID, PR, ES, DL), Q1,
             @j(PRID2, PR2, ES2, DL2), Q2))
     task(id(PRID) k(@block ~> K1) REST)
     task(id(PRID2) k(K2) REST2)
  => minCurrTime(if MCT < ES then ES else MCT fi)
     activeJob(Some(@j(PRID, PR, ES, DL)))
     sQueue((@j(PRID, PR, ES, DL), Q1,
             @j(PRID2, PR2, ES2, DL2), Q2))
     task(id(PRID) k(K1) REST)
     task(id(PRID2) k(@block ~> K2) REST2) .
endm

--- wait semantics
mod WAIT-SEMANTICS is
  inc CODE-CONFIG .
  inc CYCLE-SEMANTICS .
  
  var PRID : ProcessId .
  vars TKS : List{ProcessId} .
  var E : PExp .
  var K : K .
  vars MCT : Rat .
  vars V1 CONST : SemanticValue .
  vars D P : Nat .
  var REST : KConfig .
  vars PR ES DL IN WT : Nat .
  var JOBS : JobSet .
  vars Q1 Q2 : JobList .
  var IM : Map{ProcessId, Nat} .

  eq k(WAIT(E) ~> K) = k(IF E THEN skip ; ELSE @release ; WAIT(E) ; ENDIF   ~> K) .

  eq activeJob(Some(@j(PRID, PR, ES, DL)))
     sQueue((Q1, @j(PRID, PR, ES, DL), Q2))
     futureJobs(JOBS)
     interval((PRID |-> IN, IM))
     task(id(PRID) (k(@release ~> K)) REST)
   = activeJob(None)
     sQueue(Q1, Q2)
     futureJobs((JOBS @j(PRID, PR, ES + IN, DL + IN)))
     interval((PRID |-> IN, IM))
     task(id(PRID) (k(@block ~> @timerUpdate ~> K)) REST) . --- input?

 crl [WAITTIMEDECREASE] :
     minCurrTime(MCT)
     activeJob(Some(@j(PRID, PR, ES, DL)))
     sQueue((Q1, @j(PRID, PR, ES, DL), Q2))
     futureJobs(JOBS)
     interval((PRID |-> IN, IM))
     task(id(PRID) (k(WAITTIME(V1) ~> K)) REST)
     constraints(CONST)
  => minCurrTime(MCT)
     activeJob(None)
     sQueue(Q1, Q2)
     futureJobs((JOBS @j(PRID, PR, ES + IN, DL + IN)))
     interval((PRID |-> IN, IM))
     task(id(PRID) (k(@block ~> @timerUpdate ~> WAITTIME(V1 - syn2sem(T# IN ms)) ~> K)) REST)
     constraints(simplify(CONST AND V1 > syn2sem(T# 0 ms)))
  if checkSAT(V1 > syn2sem(T# 0 ms)) .

---( ???
 crl [WAITTIMEEND] :
     minCurrTime(MCT)
     activeJob(Some(@j(PRID, PR, ES, DL)))
     sQueue((Q1, @j(PRID, PR, ES, DL), Q2))
     futureJobs(JOBS)
     interval((PRID |-> IN, IM))
     task(id(PRID) (k(WAITTIME(V1) ~> K)) REST)
  => minCurrTime(MCT + WT)
     activeJob(Some(@j(PRID, PR, ES, DL)))
     sQueue((Q1, @j(PRID, PR, ES, DL), Q2))
     futureJobs(JOBS)
     interval((PRID |-> IN, IM))
     task(id(PRID) (k(K)) REST)
  if checkSAT(V1 <= syn2sem(T# IN ms))
  /\ V1 := T[WT]  .
---)

---(
  crl [WAITTIMEDECREASE] : jobQueue(PRID :: TKS) mainList(ML1 @m(PRID, D, P) ML2) 
                           task(id(PRID) (k(WAITTIME(V1) ~> K)) REST) cycleTime(CT) constraints(CONST)
     => decideWhatProcToRun(jobQueue(TKS), task( id(PRID) (k(WAITTIME(V1 - syn2sem(T# CT ms)) ~> K)) REST) )
        mainList(ML1 @m(PRID, 1, P) ML2) 
        cycleTime(CT)  constraints(simplify(CONST AND V1 > syn2sem(T# 0 ms)))
        if checkSAT(V1 > syn2sem(T# 0 ms)) .

  crl [WAITTIMEND] : jobQueue(PRID :: TKS) task(id(PRID)  (k(WAITTIME(V1) ~> K)) REST) constraints(CONST)
   => jobQueue(PRID :: TKS) task(id(PRID)  (k(K)) REST) constraints(simplify(CONST AND V1 <= syn2sem(T# 0 ms)))
   if checkSAT(V1 <= syn2sem(T# 0 ms)) .
---)
endm

--- semantics for time-related FBs (TON, ...)
fmod TIMER-SEMANTICS is 
  inc CODE-CONFIG .

  vars CPR : ProcessId .
  var IDSTACK : List{ProcessId} .
  var K : K .  
  vars CT PTIME : Rat .
  var PV1 : PValue .
  vars RESTOBJS : KConfig .
  vars REST REST2 : KConfig .
  var TVAL : SemanticValue .

---(
  eq task((k(@#cycleValue ~> K)) REST) cycleTime(CT) 
   =
     task((k(syn2sem(T# CT ms) ~> K)) REST) cycleTime(CT) .
---)

  eq task(id(CPR) (k(@#timerValue ~> K)) REST) 
     objs(obj(id(CPR) timer(@timer(TVAL)) REST2) RESTOBJS)
   =
     task(id(CPR) (k(TVAL ~> K)) REST) 
     objs(obj(id(CPR) timer(@timer(TVAL)) REST2) RESTOBJS) .

  eq task(id(CPR) k(@#timerSetValue(T# PTIME ms) ~> K) REST) 
     objs(obj(id(CPR) timer(@timer(TVAL)) REST2) RESTOBJS)
   =
     task(id(CPR) k(K) REST) 
     objs(obj(id(CPR) timer(@timer(syn2sem(T# PTIME ms))) REST2) RESTOBJS) .
endfm
