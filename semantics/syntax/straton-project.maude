---( 	The straton-project.maude converts preprocessed STRATON project files into project files in 'Maude' programming language syntax.
	The preprocessed programs inside plc/test/ directory call this for conversion.
	For ease of understanding, let's use the plc/test/test2-linear-inc.maude file as an example.	
---)

--- APPLICATIIN-CONFIG contains list of POUs, and the order of main program, each main program's period and cycle information.
fmod APPLICATION-CONFIG is 
  including RAT .
  including VAR-DECLARATION-SYNTAX .
  including SPECIALTYPE-DECLARATION-SYNTAX .

  sort ProgramItem .
  sort ProgramList .
  sort MainProgramItem .
  subsort MainProgramItem < ProgramItem .
  subsort ProgramItem < ProgramList .

  --- emptyProgramList represents empty list of program.
  op emptyProgramList : -> ProgramList [ctor] .
  subsort Pid < ProgramItem .

  --- ex 'main(1, 1) ; in test2-linear-inc.maude, which means Main program 'main' has cycle 1, phase 0.
  op _([#_`,#_]) : Pid Nat Nat -> MainProgramItem [ctor prec 1] . --- This line fetchs cycles and phases of main programs.
  op _;;_ : ProgramList ProgramList -> ProgramList [ctor prec 2 assoc id: emptyProgramList] .
  op _;; : ProgramList -> ProgramList [ctor prec 1] .
  eq PL:ProgramList ;; = PL:ProgramList .
  --- POUs (main program, subprograms, user defined function blocks) are declared seperately according to their type.
  sort ProgramDecl .

  ---( ex in test2-linear-inc.maude, for main programs
	PROGRAMS
	'main(1, 1) ;
	PROGRAMSEND
  ---)
  op PROGRAMS_PROGRAMSEND : ProgramList -> ProgramDecl [ctor] .

  ---( ex in test2-linear-inc.maude, for subprograms. Since there is no subprograms, emptyProgramList locates here.
	SUBPROGRAMS
        emptyProgramList
	SUBPROGRAMSEND
  ---)
  op SUBPROGRAMS_SUBPROGRAMSEND : ProgramList -> ProgramDecl [ctor] .

  ---( ex in test2-linear-inc.maude, for user-defined function blocks. Since there is no udfb, emptyProgramList locates here.
	UDFBS
	emptyProgramList
	UDFBSEND
  ---)
  op UDFBS_UDFBSEND : ProgramList -> ProgramDecl [ctor] .

  op __ : ProgramDecl ProgramDecl -> ProgramDecl [ctor assoc prec 50] .

  --- Cycle time of simulation in STRATON project. ex CycleTime : 1 in test2-linear-inc.maude.
  sort CycleTime .
  op CycleTime:`#_ : Nat -> CycleTime .

  ---(  AppConfig is the whole list of programs, global variables, and cycle time are declared between BEGINCONFIG and ENDCONFIG.
	ex in test2-linear-inc.maude,
	BEGINCONFIG
	
	PROGRAMS
	'main(1, 1) ;
	PROGRAMSEND

	SUBPROGRAMS
	emptyProgramList
	SUBPROGRAMSEND

	UDFBS
	emptyProgramList
	UDFBSEND

	GVAR
	'main : #PROGRAM ;
	ENDGVAR

	CycleTime: 1

	ENDCONFIG
  ---) 
  sort AppConfig .
  op BEGINCONFIG____ENDCONFIG : ProgramDecl TypeSection VarSection CycleTime -> AppConfig [ctor prec 60] .

endfm

fmod POU-DEF is
  inc PLC-SYNTAX .

  sort POUDefinition .
  sort POUSection .
  sort POUType .
---( Below lines fetch actual codes inside each programs. These are handled by syntax.mode
	ex in test2-linear-inc.maude,
	program 'main 

	VAR
	  'aaa : DINT := # 0 ;
	ENDVAR

	CODE
	   'aaa := 'aaa + # 1 ;
	ENDCODE

	endprogram
---)
  op STRUCT__ENDSTRUCT : Pid VarSection -> POUDefinition [ctor prec 3] .
  op FUNCTIONBLOCK___ENDFUNCTIONBLOCK : Pid VarSection CodeSection -> POUDefinition [ctor prec 3] .
  op PROGRAM___ENDPROGRAM : Pid VarSection CodeSection -> POUDefinition [ctor prec 3] .
endfm

view POUDefinition from TRIV to POU-DEF is
  sort Elt to POUDefinition .
endv

fmod STRATON-PROJECT is
  inc APPLICATION-CONFIG .
  inc POU-DEF .
  pr LIST{POUDefinition} .
  ---( The whole details of all programs are declared between BEGINPOUS and ENDPOUS
	ex in test2-linear-inc.maude.
	BEGINPOUS

	program 'main 

	VAR
	  'aaa : DINT := # 0 ;

	ENDVAR

	CODE
	   'aaa := 'aaa + # 1 ;
	ENDCODE
	endprogram

	ENDPOUS
  ---)
  op BEGINPOUS_ENDPOUS : List{POUDefinition} -> POUSection [ctor] .
  sort StratonProject .
  op __ : AppConfig POUSection -> StratonProject [ctor prec 70] .

  op _<-load-_ : StratonProject List{POUDefinition} ~> StratonProject [ctor prec 80] .
  eq BEGINCONFIG PD:ProgramDecl GTS:TypeSection GVS:VarSection CT:CycleTime ENDCONFIG
     BEGINPOUS OPOUS:List{POUDefinition} ENDPOUS
       <-load-
     LPOUS:List{POUDefinition}
   = BEGINCONFIG PD:ProgramDecl GTS:TypeSection GVS:VarSection CT:CycleTime ENDCONFIG
     BEGINPOUS (OPOUS:List{POUDefinition} LPOUS:List{POUDefinition}) ENDPOUS .
endfm
