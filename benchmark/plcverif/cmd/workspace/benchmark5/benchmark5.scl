FUNCTION_BLOCK Main
	VAR
		B1         : BOOL;
		R1         : REAL;
		R2         : REAL;
		R3         : REAL;
		R4         : REAL;
		R5         : REAL;
		R6         : REAL;
		R7         : REAL;
		PIDHANDLER : USER_PID;
		PIDOUT     : REAL;
		CYCLE      : DINT := 0;
	END_VAR
BEGIN
	CYCLE := CYCLE + 1;
	PIDHANDLER(
		AUTO := B1,
		PV := R1,
		SP := R2,
		X0 := R3,
		KP := R4,
		TR := R5,
		TD := R6,
		CYCLE := R7
	);
	PIDOUT := PIDHANDLER.XOUT;
	//#ASSERT (PIDOUT = 1) AND (0 <= CYCLE AND CYCLE <= 20) : POUSTISONE
	//#ASSERT (PIDOUT <> 1) AND (0 <= CYCLE AND CYCLE <= 20) : POUSTISNOTONE
END_FUNCTION_BLOCK

FUNCTION_BLOCK USER_INTEGRAL
	VAR_INPUT
		RUN   : BOOL;
		R1    : BOOL;
		XIN   : REAL;
		X0    : REAL;
		CYCLE : REAL;
	END_VAR
	VAR_OUTPUT
		Q    : BOOL;
		XOUT : REAL;
	END_VAR
BEGIN
	Q := NOT R1;
	IF R1 THEN
		XOUT := X0;
	ELSIF RUN THEN
		XOUT := XOUT + XIN * CYCLE;
	END_IF;
END_FUNCTION_BLOCK

FUNCTION_BLOCK USER_DERIVATIVE
	VAR_INPUT
		RUN   : BOOL;
		XIN   : REAL;
		CYCLE : REAL;
	END_VAR
	VAR_OUTPUT
		XOUT : REAL;
	END_VAR
	VAR
		X1 : REAL;
		X2 : REAL;
		X3 : REAL;
	END_VAR
BEGIN
	IF RUN THEN
		XOUT := (3.0 * (XIN - X3) + X1 - X2) / (10.0 * CYCLE);
		X3 := X2;
		X2 := X1;
		X1 := XIN;
	ELSE
		XOUT := 0.0;
		X1 := XIN;
		X2 := XIN;
		X3 := XIN;
	END_IF;
END_FUNCTION_BLOCK


FUNCTION_BLOCK USER_PID
	VAR_INPUT
		AUTO  : BOOL;
		PV    : REAL;
		SP    : REAL;
		X0    : REAL;
		KP    : REAL;
		TR    : REAL;
		TD    : REAL;
		CYCLE : REAL;
	END_VAR
	VAR_OUTPUT
		XOUT : REAL;
	END_VAR
	VAR
		ERROR : REAL;
		ITERM : USER_INTEGRAL;
		DTERM : USER_DERIVATIVE;
	END_VAR
BEGIN
	ERROR := PV - SP;
	ITERM(
		RUN := AUTO,
		R1 := NOT AUTO,
		XIN := ERROR,
		X0 := TR * (X0 - ERROR),
		CYCLE := CYCLE
	) ;
	DTERM(
		RUN := AUTO,
		XIN := ERROR,
		CYCLE := CYCLE
	) ;
	XOUT := KP * (ERROR + ITERM.XOUT / TR + DTERM.XOUT * TD);
END_FUNCTION_BLOCK