
VAR_GLOBAL
	GLOBAL_TIME : TIME := T#0ms;
	CYCLE_TIME  : TIME := T#0ms;
END_VAR

FUNCTION ABS : REAL
	VAR_INPUT
		in : REAL;
	END_VAR
	IF in < 0 THEN
		ABS := -1 * in;
	ELSE
		ABS := in;
	END_IF;
END_FUNCTION

FUNCTION_BLOCK PLS
	VAR
		PEROID_CHECKER : TIME := T#0ms;
		FIRST_CHECKER  : BOOL := TRUE;
	END_VAR

	VAR_INPUT
		RUN   : BOOL := FALSE;
		CYCLE : TIME := T#0ms;
	END_VAR

	VAR_OUTPUT
		Q : BOOL := FALSE;
	END_VAR

	IF (FIRST_CHECKER) THEN
		FIRST_CHECKER := FALSE;
		PEROID_CHECKER := GLOBAL_TIME;
	END_IF;

	IF (RUN AND (GLOBAL_TIME  - PEROID_CHECKER ) >= CYCLE) THEN
		PEROID_CHECKER := GLOBAL_TIME;
	END_IF;

	IF (RUN AND (GLOBAL_TIME - PEROID_CHECKER ) >= (CYCLE - CYCLE_TIME) ) THEN
		Q := TRUE;
	END_IF;


	IF (NOT RUN ) THEN
		Q := FALSE;
	END_IF;

END_FUNCTION_BLOCK


FUNCTION_BLOCK R_TRIG
	VAR
		CLK_PREV : BOOL := FALSE;
	END_VAR

	VAR_INPUT
		CLK : BOOL := FALSE;
	END_VAR

	VAR_OUTPUT
		Q : BOOL := FALSE;
	END_VAR

	IF (  NOT CLK AND  NOT CLK_PREV ) THEN
		Q := FALSE;
	END_IF;
	IF (  NOT CLK AND CLK_PREV ) THEN
		Q := FALSE;
	END_IF;
	IF ( CLK AND  NOT CLK_PREV ) THEN
		Q := TRUE;
	END_IF;
	IF ( CLK AND CLK_PREV ) THEN
		Q := FALSE;
	END_IF;
	CLK_PREV := CLK;
END_FUNCTION_BLOCK


FUNCTION_BLOCK TP
	VAR_INPUT
		IN : BOOL := FALSE;
		PT : TIME := T#0ms;
	END_VAR
	VAR
		NOW : TIME;
	END_VAR
	VAR_OUTPUT
		Q  : BOOL := FALSE;
		ET : TIME := T#0ms;
	END_VAR

	IF (NOT IN AND NOT Q) THEN
		Q := FALSE;
		ET := T#0ms;
	END_IF;

	IF IN THEN
		Q := TRUE;
		ET := GLOBAL_TIME;
		NOW := GLOBAL_TIME;
	END_IF;

	IF ((GLOBAL_TIME - NOW) >= PT ) THEN
		ET := PT;
		Q := FALSE;
	END_IF;

END_FUNCTION_BLOCK